#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk
import os
import sys
import signal
import gtk.gdk
import csv


class MyWindow(gtk.Window):

	def __init__(self):
		gtk.Window.__init__(self)
		self.set_title("Startmenu")
		self.connect("size-allocate", self.new_size_allocated)
		color = gtk.gdk.color_parse('#f5f5f5')
		self.modify_bg(gtk.STATE_NORMAL, color)
		
		#Load from data
		self.apps = gtk.ListStore(gtk.gdk.Pixbuf, str, str)
		self.sysarea = gtk.ListStore(gtk.gdk.Pixbuf, str, str)

		
		
		path = '/home/' + os.getlogin() + '/.infinity/';
		print(path);
		with open(path + "startmenu2.data", 'rb') as csvfile:
			csvreader = csv.reader(csvfile, delimiter=',', quotechar='#')
			for row in csvreader:
				if len(row) >= 3:
					pixbuf = gtk.icon_theme_get_default().load_icon(row[1], 64, 0)
					label = row[0]
					command = row[2]
					self.apps.append([pixbuf, label, command])

		add_pixbuf = gtk.icon_theme_get_default().load_icon("add", 64, 0)
		self.apps.append([add_pixbuf, "More", "xfce4-appfinder"])


		self.mainbox = gtk.VBox()
		self.add(self.mainbox)

		self.topbox = gtk.HBox()
		self.mainbox.pack_start(self.topbox)
		
		
		self.iconview = gtk.IconView()
		self.iconview.set_model(self.apps)
		self.iconview.set_pixbuf_column(0)
		self.iconview.set_text_column(1)


		self.mainbox.pack_start(self.iconview)
		self.iconview.set_size_request(400,420)

		self.iconview.connect("selection-changed", self.application_selected)

		# Topbox
		self.searchbox = gtk.Entry();
		self.topbox.pack_start(self.searchbox);
		self.searchbox.set_size_request(190, 24)
		self.searchbox.set_has_frame(False)
		self.searchbox.connect("key_press_event", self.keydown_entry)

		
		#self.sysarea.append([gtk.icon_theme_get_default().load_icon("me-tv-panel", 24, 0), "Monitor", "arandr"])
		self.sysarea.append([gtk.icon_theme_get_default().load_icon("zim-panel", 24, 0), 
			"Software Directory", "/opt/infinity/softdir/softdir"])
		self.sysarea.append([gtk.icon_theme_get_default().load_icon("xfce-system-lock", 24, 0), "Lock", "bl-lock"])
		self.sysarea.append([gtk.icon_theme_get_default().load_icon("gnome-shutdown", 24, 0), "Exit", "bl-exit"])
		self.sysarea.append([gtk.icon_theme_get_default().load_icon("system-devices-panel", 24, 0), 
			"Control Panel", "/opt/infinity/icontrol"])

		self.sysview = gtk.IconView()
		self.sysview.set_model(self.sysarea)
		self.sysview.set_pixbuf_column(0)
		self.sysview.set_text_column(-1)


		self.topbox.pack_start(self.sysview)
		self.sysview.set_size_request(60,24)
		self.sysview.set_property("item-padding",0)
		self.sysview.connect("selection-changed", self.sys_selected)
		

		
	def new_size_allocated(self, widget, allocation):
		self.set_gravity(gtk.gdk.GRAVITY_SOUTH_EAST)
		width, height = self.get_size()
		self.move(0, gtk.gdk.screen_height() - height - 40)
		self.searchbox.select_region(0,0)
		
	def application_selected(self, iconview):
		selected = iconview.get_selected_items()
		command = self.apps[selected[0][0]][2]
		os.system(command + " &")
		gtk.main_quit()

	def sys_selected(self, iconview):
		selected = iconview.get_selected_items()
		command = self.sysarea[selected[0][0]][2]
		os.system(command + " &")
		gtk.main_quit()

	def keydown_entry(self, widget, event):
		if event.keyval == 65293:
			command = widget.get_text()
			os.system(command + " &")
			gtk.main_quit()


		
win = MyWindow()
win.connect("delete-event", gtk.main_quit)
win.show_all()
win.set_size_request(400, 450)

pid = str(os.getpid())
pidfile = "/tmp/smenu.pid"

if os.path.isfile(pidfile):
	print("pidfile exists")
	spid = file(pidfile, 'r').read();
	os.unlink(pidfile)
	os.kill(int(spid), signal.SIGKILL)
	
	sys.exit()
else:
	file(pidfile, 'w').write(pid)

gtk.main()

os.unlink(pidfile)
